"""empty message

Revision ID: 44a71b26c531
Revises: 
Create Date: 2020-05-31 11:20:22.411289

"""
import json
import os
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '44a71b26c531'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    goals = op.create_table('goals',
                            sa.Column('id', sa.Integer(), nullable=False),
                            sa.Column('key', sa.String(), nullable=False),
                            sa.Column('value', sa.String(), nullable=False),
                            sa.Column('emoji', sa.String(), nullable=False),
                            sa.PrimaryKeyConstraint('id')
                            )
    requests = op.create_table('requests',
                               sa.Column('id', sa.Integer(), nullable=False),
                               sa.Column('goal', sa.String(), nullable=False),
                               sa.Column('name', sa.String(), nullable=False),
                               sa.Column('phone', sa.String(), nullable=False),
                               sa.Column('time', sa.String(), nullable=False),
                               sa.PrimaryKeyConstraint('id')
                               )
    teachers = op.create_table('teachers',
                               sa.Column('id', sa.Integer(), nullable=False),
                               sa.Column('name', sa.String(), nullable=False),
                               sa.Column('about', sa.Text(), nullable=False),
                               sa.Column('rating', sa.Float(), nullable=False),
                               sa.Column('picture', sa.String(),
                                         nullable=False),
                               sa.Column('price', sa.Float(), nullable=False),
                               sa.Column('free', postgresql.JSONB(),
                                         nullable=False),
                               sa.PrimaryKeyConstraint('id')
                               )
    bookings = op.create_table('bookings',
                               sa.Column('id', sa.Integer(), nullable=False),
                               sa.Column('day', sa.String(), nullable=False),
                               sa.Column('time', sa.String(), nullable=False),
                               sa.Column('teacher_id', sa.Integer(),
                                         nullable=False),
                               sa.Column('name', sa.String(), nullable=False),
                               sa.Column('phone', sa.String(
                                   length=11), nullable=False),
                               sa.ForeignKeyConstraint(
                                   ['teacher_id'], ['teachers.id'], ),
                               sa.PrimaryKeyConstraint('id'),
                               sa.UniqueConstraint('phone')
                               )
    teachers_goals = op.create_table('teachers_goals',
                                     sa.Column('teacher_id',
                                               sa.Integer(), nullable=True),
                                     sa.Column(
                                         'goal_id', sa.Integer(), nullable=True),
                                     sa.ForeignKeyConstraint(
                                         ['goal_id'], ['goals.id'], ),
                                     sa.ForeignKeyConstraint(
                                         ['teacher_id'], ['teachers.id'], )
                                     )
    # ### end Alembic commands ###
    json_file_path = os.path.abspath(os.path.join(
        os.path.dirname(__file__), '..', '..', 'json_data', 'data.json'))
    with open(json_file_path, 'r') as f:
        data = json.loads(f.read())
    goals_to_insert = []
    goals_index = 0
    for k, e in data['goals'].items():
        goals_to_insert.append(
            {'id': goals_index, 'key': k, 'value': e, 'emoji': data['goals_emoji'][k]})
        goals_index += 1
    op.bulk_insert(goals, goals_to_insert)
    teachers_to_insert = []
    teachers_goals_to_insert = []
    for teacher in data['teachers']:
        # print(teacher['goals'])
        #e['free'] = json.dumps(e['free'])
        for goal in goals_to_insert:
            if goal['key'] in teacher['goals']:
                teachers_goals_to_insert.append(
                    {'teacher_id': teacher['id'], 'goal_id': goal['id']})
        del teacher['goals']
        teachers_to_insert.append(teacher)
    op.bulk_insert(teachers, teachers_to_insert)
    op.bulk_insert(teachers_goals, teachers_goals_to_insert)
    op.bulk_insert(bookings, [{'id': 0, 'day': 'mon', 'time': '14:00', 'teacher_id': 0, 'name': 'test', 'phone': '11111111111'}, {
                   'id': 1, 'day': 'mon', 'time': '16:00', 'teacher_id': 0, 'name': 'test', 'phone': '11111111112'}])
    op.bulk_insert(requests, [{'id': 0, 'goal': 'travel',
                               'time': '14:00', 'name': 'test', 'phone': '11111111113'}])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('teachers_goals')
    op.drop_table('bookings')
    op.drop_table('teachers')
    op.drop_table('requests')
    op.drop_table('goals')
    # ### end Alembic commands ###
